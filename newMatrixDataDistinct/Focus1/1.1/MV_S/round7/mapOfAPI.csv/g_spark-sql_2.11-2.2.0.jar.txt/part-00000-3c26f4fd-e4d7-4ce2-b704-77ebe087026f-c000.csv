0	org/apache/spark/sql/catalyst/analysis/Analyzer$ResolveAggregateFunctions$$anonfun$apply$21$$anonfun$6$$anonfun$applyOrElse$57/57(org.apache.spark.sql.catalyst.analysis.Analyzer$ResolveAggregateFunctions$$anonfun$apply$21$$anonfun$6,org.apache.spark.sql.catalyst.expressions.Expression)
1	scala/collection/Seq/exists(scala.Function1)
2	org/apache/spark/sql/catalyst/expressions/Alias$/apply$default$4(org.apache.spark.sql.catalyst.expressions.Expression,java.lang.String)
3	scala/collection/SeqLike/$colon$plus(java.lang.Object,scala.collection.generic.CanBuildFrom)
4	org/apache/spark/sql/catalyst/expressions/codegen/GenerateUnsafeProjection$$anonfun$1/1(org.apache.spark.sql.catalyst.expressions.codegen.CodegenContext,java.lang.String)
5	org/apache/spark/sql/catalyst/plans/QueryPlan$$anonfun$generateEquivalentConstraintClasses$1$$anonfun$3/3(org.apache.spark.sql.catalyst.plans.QueryPlan$$anonfun$generateEquivalentConstraintClasses$1,org.apache.spark.sql.catalyst.expressions.Attribute)
6	scala/collection/immutable/Set/$plus(java.lang.Object)
7	org/apache/spark/sql/catalyst/expressions/codegen/GenerateUnsafeProjection$/writeUnsafeData(org.apache.spark.sql.catalyst.expressions.codegen.CodegenContext,java.lang.String,java.lang.String)
8	org/apache/spark/sql/execution/datasources/parquet/ParquetFileFormat$FileTypes/commonMetadata()
9	scala/collection/immutable/Set/nonEmpty()
10	scala/collection/TraversableLike/map(scala.Function1,scala.collection.generic.CanBuildFrom)
11	scala/collection/immutable/Set$/apply(scala.collection.Seq)
12	org/apache/spark/sql/catalyst/plans/QueryPlan$$anonfun$generateEquivalentConstraintClasses$1$$anonfun$4/4(org.apache.spark.sql.catalyst.plans.QueryPlan$$anonfun$generateEquivalentConstraintClasses$1,org.apache.spark.sql.catalyst.expressions.Attribute)
13	scala/Predef$/genericWrapArray(java.lang.Object)
14	scala/Function1/apply(java.lang.Object)
15	org/apache/spark/sql/catalyst/expressions/codegen/GenerateUnsafeProjection$/writeExpressionsToBuffer$default$6()
16	scala/Predef$/Set()
17	org/apache/spark/sql/catalyst/expressions/codegen/GenerateUnsafeProjection$/writeExpressionsToBuffer(org.apache.spark.sql.catalyst.expressions.codegen.CodegenContext,java.lang.String,scala.collection.Seq,scala.collection.Seq,java.lang.String,boolean)
18	org/apache/spark/sql/catalyst/analysis/Analyzer$ResolveAggregateFunctions$$anonfun$apply$21/org$apache$spark$sql$catalyst$analysis$Analyzer$ResolveAggregateFunctions$$anonfun$$$outer()
19	scala/Predef$/wrapRefArray(java.lang.Object[])
20	org/apache/spark/sql/catalyst/expressions/Alias$/apply$default$5(org.apache.spark.sql.catalyst.expressions.Expression,java.lang.String)
21	scala/collection/Seq$/canBuildFrom()
22	scala/StringContext/s(scala.collection.Seq)
23	scala/collection/immutable/Nil$/$colon$colon(java.lang.Object)
24	org/apache/spark/sql/catalyst/analysis/Analyzer$ResolveAggregateFunctions$/org$apache$spark$sql$catalyst$analysis$Analyzer$ResolveAggregateFunctions$$$outer()
25	scala/collection/mutable/ArrayBuffer/$plus$eq(java.lang.Object)
26	org/apache/spark/sql/catalyst/analysis/Analyzer$ResolveGroupingAnalytics$/hasGroupingFunction(org.apache.spark.sql.catalyst.expressions.Expression)
27	scala/collection/immutable/List/$colon$colon(java.lang.Object)
28	org/apache/spark/sql/catalyst/analysis/Analyzer$ResolveAggregateFunctions$$anonfun$apply$21$$anonfun$6$$anonfun$applyOrElse$58/58(org.apache.spark.sql.catalyst.analysis.Analyzer$ResolveAggregateFunctions$$anonfun$apply$21$$anonfun$6,org.apache.spark.sql.catalyst.expressions.Expression)
29	scala/collection/Seq/diff(scala.collection.GenSeq)
30	org/apache/spark/sql/catalyst/expressions/Alias$/apply$default$3(org.apache.spark.sql.catalyst.expressions.Expression,java.lang.String)
31	scala/collection/immutable/Set/$plus$plus(scala.collection.GenTraversableOnce)
32	scala/collection/Seq/$colon$plus(java.lang.Object,scala.collection.generic.CanBuildFrom)
33	org/apache/spark/sql/catalyst/expressions/Alias$/apply$default$6(org.apache.spark.sql.catalyst.expressions.Expression,java.lang.String)
34	scala/StringContext/StringContext(scala.collection.Seq)
35	scala/collection/Seq/zipWithIndex(scala.collection.generic.CanBuildFrom)
